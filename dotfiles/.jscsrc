{
  //
  // ESNext is ready for primetime.
  // Lets do this.
  //
  "esnext": true,

  //
  // requireCurlyBraces
  // TL;DR? No curly braces needed for case statements
  //
  "requireCurlyBraces": [
    "if",
    "else",
    "for",
    "while",
    "do",
    "try",
    "catch",
    "switch"
  ],

  //
  // requireSpaceBeforeKeywords
  // Everywhere all the time, except that really
  // "else" should always be on a newline.
  //
  "requireSpaceBeforeKeywords": [
    "else",
    "while",
    "catch"
  ],
  "disallowSpaceBeforeKeywords": null,

  //
  // requireSpaceAfterKeywords
  // Everywhere all the time.
  //
  "requireSpaceAfterKeywords":  true,
  "disallowSpaceAfterKeywords": null,

  //
  // requireSpaceBeforeBlockStatements
  // Everywhere all the time.
  // TODO (indexzero): revisit this.
  //
  "requireSpaceBeforeBlockStatements":  true,
  "disallowSpaceBeforeBlockStatements": null,

  //
  // requireParenthesesAroundIIFE
  //
  "requireParenthesesAroundIIFE": true,

  //
  // requireSpacesInConditionalExpression
  //
  "requireSpacesInConditionalExpression":  true,
  "disallowSpacesInConditionalExpression": null,

  //
  // requireSpacesInFunctionExpression
  // disallowSpacesInFunctionExpression
  // requireSpacesInFunction
  // disallowSpacesInFunction
  // Rules are too broad. These are disabled in favor of
  // their more specific cousins.
  //
  "requireSpacesInFunctionExpression": {
    "beforeOpeningRoundBrace": null,
    "beforeOpeningCurlyBrace": null
  },
  "disallowSpacesInFunctionExpression": {
    "beforeOpeningRoundBrace": null,
    "beforeOpeningCurlyBrace": null
  },
  "requireSpacesInFunction": {
    "beforeOpeningRoundBrace": null,
    "beforeOpeningCurlyBrace": null
  },
  "disallowSpacesInFunction": {
    "beforeOpeningRoundBrace": null,
    "beforeOpeningCurlyBrace": null
  },

  //
  // requireSpacesInAnonymousFunctionExpression
  // disallowSpacesInAnonymousFunctionExpression
  //
  // var foo = function () {};
  // function () { }
  // array.map(function () {});
  //
  "requireSpacesInAnonymousFunctionExpression": {
    "beforeOpeningRoundBrace": true,
    "beforeOpeningCurlyBrace": true
  },
  "disallowSpacesInAnonymousFunctionExpression": {
    "beforeOpeningRoundBrace": null,
    "beforeOpeningCurlyBrace": null
  },

  //
  // requireSpacesInNamedFunctionExpression
  // disallowSpacesInNamedFunctionExpression
  // requireSpacesInFunctionDeclaration
  // disallowSpacesInFunctionDeclaration
  //
  // var x = function foo() { };
  // function foo() { }
  //
  "requireSpacesInNamedFunctionExpression": {
    "beforeOpeningRoundBrace": null,
    "beforeOpeningCurlyBrace": true
  },
  "disallowSpacesInNamedFunctionExpression": {
    "beforeOpeningRoundBrace": true,
    "beforeOpeningCurlyBrace": null
  },
  "requireSpacesInFunctionDeclaration": {
    "beforeOpeningRoundBrace": null,
    "beforeOpeningCurlyBrace": true
  },
  "disallowSpacesInFunctionDeclaration": {
    "beforeOpeningRoundBrace": true,
    "beforeOpeningCurlyBrace": null
  },

  //
  // requireSpacesInCallExpression
  // disallowSpacesInCallExpression
  // var x = foobar();
  //
  "requireSpacesInCallExpression": null,
  "disallowSpacesInCallExpression": true,

  //
  // Variable declarations
  // disallowMultipleVarDecl
  // requireMultipleVarDecl
  // One var statement per scope
  //
  "disallowMultipleVarDecl": null,
  //
  // Remark (indexzero): Readd this once this issue is fixed.
  // https://github.com/jscs-dev/node-jscs/issues/768
  //
  "requireMultipleVarDecl": null,
  "requireLineBreakAfterVariableAssignment": null,
  "requirePaddingNewLineAfterVariableDeclaration": null,

  //
  // requireBlocksOnNewline
  // if (true) {
  //   doSomething();
  //   doSomethingElse();
  // }
  // if (true) { doSomething(); }
  // var abc = function() {};
  //
  "requireBlocksOnNewline": 1,

  //
  // requirePaddingNewlinesInBlocks
  // disallowPaddingNewlinesInBlocks
  // Nope. Don't need this.
  //
  "requirePaddingNewlinesInBlocks": null,
  "disallowPaddingNewlinesInBlocks": true,

  //
  // requirePaddingNewLinesInObjects
  // disallowPaddingNewLinesInObjects
  // Neither of these are granular enough for my style.
  // TODO (indexzero): Make this also accept and integer.
  //
  "requirePaddingNewLinesInObjects": null,
  "disallowPaddingNewLinesInObjects": null,

  //
  // disallowPaddingNewlinesBeforeKeywords
  // requirePaddingNewlinesBeforeKeywords
  // Speaks for itself really.
  //
  // Remark (indexzero): These should also accept an integer for
  // minimum size of the block before throwing.
  // See: https://github.com/jscs-dev/node-jscs/issues/826
  //
  "disallowPaddingNewlinesBeforeKeywords": null,
  "requirePaddingNewlinesBeforeKeywords": [
    //
    // Remark (indexzero): uncomment after #826 is resolved.
    //
    // "do",
    // "for",
    // "if",
    // "switch",
    // "case",
    // "try",
    // "while",
    // "return"
    //
    // Remark (indexzero): wat
    // "void",
    // "typeof",
    // "with"
    //
    // Remark (indexzero): valid but ignored
    //
    // "function",
    // "else",
    // "catch",
    //
  ],

  //
  // disallowKeywordsOnNewLine
  // requireKeywordsOnNewLine
  // else goes on a newline always.
  //
  // Remark (indexzero): valid but ignored "return"
  // TODO (indexzero): Open an issue about "return"
  //
  "requireKeywordsOnNewLine": null,
  "disallowKeywordsOnNewLine": [
    "else",
    "catch"
  ],

  //
  // disallowEmptyBlocks
  // Remark (indexzero): Shouldn't this also disallow empty catches with
  // some setting? Seems like a must-have feature
  //
  // TODO (indexzero): What about blocks with comments but no code?
  //
  "disallowEmptyBlocks": true,

  //
  // disallowSpacesInsideObjectBrackets
  // disallowSpacesInsideArrayBrackets
  // disallowSpacesInsideParentheses
  // requireSpacesInsideObjectBrackets
  // requireSpacesInsideArrayBrackets
  // requireSpacesInsideParentheses
  // validateParameterSeparator
  // No for Objects, yes for Arrays & functions
  //
  "requireSpacesInsideObjectBrackets":  "all",
  "disallowSpacesInsideArrayBrackets":  "all",
  "disallowSpacesInsideParentheses":    true,
  "disallowSpacesInsideObjectBrackets": null,
  "requireSpacesInsideArrayBrackets":   null,
  "requireSpacesInsideParentheses":     null,
  "validateParameterSeparator":         ", ",

  //
  // disallowQuotedKeysInObjects
  // requireDotNotation
  // No quotes unless absolutely necessary, e.g.
  // var x = { 'a-b': 2 };
  //
  // TODO (indexzero): see what happens on the above
  //
  "disallowQuotedKeysInObjects": true,
  "requireDotNotation":          true,

  //
  // Semicolons. They are required.
  // ... deal with it. And no comma-first.
  //
  "disallowSemicolons": null,
  // TODO: Re-add these when they don't fail.
  // "disallowSpaceBeforeComma": true,
  // "disallowSpaceBeforeSemicolon": true,
  "requireSemicolons": true,
  "requireSpaceBeforeComma": null,

  //
  // Arguments.
  // Obviously there should be a space.
  //
  "disallowSpaceBetweenArguments": null,
  "requireSpaceBetweenArguments": true,

  //
  // disallowDanglingUnderscores
  // Really these are only OK in `this._value` usage.
  //
  // TODO (indexzero): open an issue and validate if this
  // is how it works.
  //
  "disallowDanglingUnderscores": null,

  //
  // Object declaration and keys
  // disallowSpaceAfterObjectKeys
  // requireSpaceBeforeObjectValues
  // requireSpaceAfterObjectKeys
  // disallowSpaceBeforeObjectValues
  // No space after keys. Yes space before values:
  // var x = { a: '123' };
  //
  "disallowSpaceAfterObjectKeys":    true,
  "requireSpaceBeforeObjectValues":  true,
  "requireSpaceAfterObjectKeys":     null,
  "disallowSpaceBeforeObjectValues": null,
  //
  // TODO (indexzero): make a decision about this
  //
  "disallowObjectKeysOnNewLine": null,
  "requireObjectKeysOnNewLine": null,

  //
  // disallowCommaBeforeLineBreak
  // requireCommaBeforeLineBreak
  // As the author of `laxcomma` in JSHint I think
  // you know where I stand.
  //
  "requireCommaBeforeLineBreak":  true,
  "disallowCommaBeforeLineBreak": null,

  //
  // requireAlignedObjectValues
  // TODO (indexzero): Make sure this conforms to my personal style
  // which is to only have the values lined up:
  //
  // var x = {
  //   foo:    'bar',
  //   foobar: 'foo'
  // };
  //
  "requireAlignedObjectValues": null,

  //
  // disallowOperatorBeforeLineBreak
  // requireOperatorBeforeLineBreak
  // TODO (indexzero): Make sure this conforms to my own crazy style
  //
  "disallowOperatorBeforeLineBreak": null,
  "requireOperatorBeforeLineBreak": null,

  //
  // disallowSpaceAfterPrefixUnaryOperators
  // disallowSpaceBeforePostfixUnaryOperators
  // requireSpaceAfterPrefixUnaryOperators
  // requireSpaceBeforePostfixUnaryOperators
  // Seriously: who puts a space there? That's crazy!
  //
  "disallowSpaceAfterPrefixUnaryOperators":   true,
  "disallowSpaceBeforePostfixUnaryOperators": true,
  "requireSpaceAfterPrefixUnaryOperators":    null,
  "requireSpaceBeforePostfixUnaryOperators":  null,

  //
  // requireSpaceBeforeBinaryOperators
  // requireSpaceAfterBinaryOperators
  // disallowSpaceBeforeBinaryOperators
  // disallowSpaceAfterBinaryOperators
  // Spaces. Always spaces.
  //
  "requireSpaceBeforeBinaryOperators":  true,
  "requireSpaceAfterBinaryOperators":   true,
  "disallowSpaceBeforeBinaryOperators": null,
  "disallowSpaceAfterBinaryOperators":  null,

  //
  // disallowImplicitTypeConversion
  // Nope. This is awesome!
  //
  "disallowImplicitTypeConversion": null,

  //
  // requireCamelCaseOrUpperCaseIdentifiers
  // requireCapitalizedConstructors
  //
  // Remark (indexzero): ignoreProperties is required because of
  // when you are dealing with APIs that have this format, but should
  // only be reserved for when you are working with said APIs.
  //
  // TODO (indexzero): Find a way to ensure that CamelCase
  // is only valid for Constructor functions.
  //
  "requireCamelCaseOrUpperCaseIdentifiers": "ignoreProperties",
  "requireCapitalizedConstructors":         true,

  //
  // disallowKeywords
  // I see no purpose in `with` and `void`.
  //
  "disallowKeywords": ["with"],

  //
  // disallowMultipleLineStrings
  // Wait ... this works in Javascript at all?
  //
  "disallowMultipleLineStrings": true,

  //
  // disallowMultipleLineBreaks
  // disallowMultipleSpaces
  // disallowMixedSpacesAndTabs
  // disallowTrailingWhitespace
  // requireLineFeedAtFileEnd
  // requireSpaceAfterLineComment
  // disallowTrailingComma
  // requireTrailingComma
  // validateLineBreaks
  // validateIndentation
  // Just ... the right amount of whitespace
  //
  // Remark (indexzero): disallowMixedSpacesAndTabs should apply to the whole
  // file, not just indivitual lines.
  //
  "disallowMultipleLineBreaks":    true,
  "disallowMultipleSpaces":        null,
  "disallowMixedSpacesAndTabs":    true,
  "disallowTrailingWhitespace":    true,
  "requireLineFeedAtFileEnd":      true,
  "disallowTrailingComma":         true,
  "requireTrailingComma":          null,
  "validateLineBreaks":            "LF",
  "validateIndentation":           2,

  //
  // requireSpaceAfterLineComment
  // requireCapitalizedComments
  // disallowSpaceAfterLineComment
  // disallowCapitalizedComments
  // Everything that has to do with comments.
  //
  //
  // TODO (indexzero): See if this jscs bug was resolved:
  // https://github.com/jscs-dev/node-jscs/issues/767
  //
  "requireSpaceAfterLineComment":  true,
  "requireCapitalizedComments":    null,
  "disallowSpaceAfterLineComment": null,
  "disallowCapitalizedComments":   null,

  //
  // Maximum lengths
  // maximumLineLength
  //
  "maximumLineLength": 100,
  "maximumNumberOfLines": null,

  //
  // requireYodaConditions
  // disallowYodaConditions
  // Wrong are you about yoda conditions use them do you if.
  // Not complain I will because funny I find you.
  //
  "disallowYodaConditions": null,
  "requireYodaConditions":  null,

  //
  // disallowAnonymousFunctions
  // requireAnonymousFunctions
  // My stance on these is that I prefer named functions
  // but I'm not strict about it.
  //
  "disallowAnonymousFunctions": null,
  "requireAnonymousFunctions":  null,

  //
  // requireFunctionDeclarations
  // disallowFunctionDeclarations
  // Yes. Function declarations always. The only time you should
  // be assigning functions to variables is when the RHS is also
  // a variable that happens to be a function.
  //
  "requireFunctionDeclarations":  true,
  "disallowFunctionDeclarations": null,

  //
  // disallowNewlineBeforeBlockStatements
  // requireNewlineBeforeBlockStatements
  // Java is to Javascript as Rock is to Rocketship.
  //
  "disallowNewlineBeforeBlockStatements": true,
  "requireNewlineBeforeBlockStatements":  null,

  //
  // Miscellaneous (and new since 1.whatever)
  // disallowDanglingUnderscores
  //
  // TODO (indexzero): look at these more closely.
  //
  "disallowKeywordsInComments": null,
  "disallowPaddingNewLinesBeforeLineComments": null,
  "requirePaddingNewLinesBeforeLineComments": null,

  "disallowNamedUnassignedFunctions": null,

  "disallowPaddingNewLinesAfterBlocks": null,
  "disallowPaddingNewLinesAfterUseStrict": null,
  "disallowPaddingNewLinesBeforeExport": null,
  "requirePaddingNewLinesAfterBlocks": null,
  "requirePaddingNewLinesAfterUseStrict": null,
  "requirePaddingNewLinesBeforeExport": null,

  "disallowSpacesInForStatement": null,
  "disallowSpacesInsideBrackets": null,
  "requireSpacesInForStatement": null,
  "requireSpacesInsideBrackets": null,

  "disallowIdentifierNames": null,
  "disallowImplicitTypeConversion": null,
  "requireMatchingFunctionName": null,
  "requireNamedUnassignedFunctions": null,


  "disallowNodeTypes": null,
  "disallowNotOperatorsInConditionals": null,
  "requireDollarBeforejQueryAssignment": null,
  "requireNumericLiterals": null,
  "safeContextKeyword": ["self", "that"],
  //
  // TODO (indexzero): continue after safeContextKeyword!!
  //

  //
  // ES6
  // disallowParenthesesAroundArrowParam
  //
  // TODO: Re-add these when they don't fail.
  // "disallowParenthesesAroundArrowParam": null,
  // "requireParenthesesAroundArrowParam": true,
  "requireArrowFunctions": null,
  "requireSpread": null,
  "requireTemplateStrings": null,

  //
  // validateQuoteMarks
  // Always use single quotes unless when you can't, like
  // when you are in a JSON file.
  //
  "validateQuoteMarks": {
    "mark":   "'",
    "escape": true
  }
}
